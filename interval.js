import { readGoogle, writeGoogle } from './crud.js';
import { dataBot, ranges } from './values.js';
import bot from "./app.js";
import { logger } from './logger/index.js';

// üóΩüåû
const checkStatus = (rowNumber, chat_id) => {
    setTimeout(async () => {
        const response = await readGoogle(ranges.statusCell(rowNumber));
        const data = response[0];
        if (data === 'reserve') {
            try {
                await bot.sendMessage(chat_id, '–í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –¥—ñ–ª—è–Ω–∫—É, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ù–µ–∑–∞–±–∞—Ä–æ–º –¥—ñ–ª—è–Ω–∫–∞ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º');
                logger.info(`USER_ID: ${chat_id} received first reminder üéÉ about lot#${rowNumber}`);
            } catch (error) {
                logger.error(`Impossible to send remind about lot#${rowNumber}. Error: ${err}`);
            }
            setTimeout(async () => {
                const response = await readGoogle(ranges.statusCell(rowNumber));
                const data = response[0];
                if (data === 'reserve') {
                    bot.sendMessage(chat_id, '–î—ñ–ª—è–Ω–∫–∞ —è–∫—É –≤–∏ –±—Ä–æ–Ω—é–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
                    try {
                        await writeGoogle(ranges.statusCell(rowNumber), [['new']]);
                        logger.info(`USER_ID: ${chat_id} received second reminder about lot#${rowNumber}. Lot#${rowNumber} avaliable for selling again ‚õµ`);
                    } catch (error) {
                        logger.error(`Impossible to send remind about lot#${rowNumber}. Error: ${err}`);
                    }
                    setTimeout(async () => {
                        const response = await readGoogle(ranges.statusCell(rowNumber));
                        const data = response[0];
                        if (data === 'new') {
                            try {
                                await bot.sendMessage(chat_id, '–î—ñ–ª—è–Ω–∫–∞ —è–∫–æ—é –≤–∏ —Ü—ñ–∫–∞–≤–∏–ª–∏—Å—å —â–µ –Ω–µ –ø—Ä–æ–¥–∞–Ω–∞');
                                logger.info(`USER_ID: ${chat_id} received LAST CHANCE üö∏ remind about lot#${rowNumber}`);
                            } catch (error) {
                                logger.error(`Impossible to send remind about lot#${rowNumber}. Error: ${err}`);
                            }
                        } return false;
                    }, dataBot.lastChanceFirst);
                } return false;
            }, dataBot.secondReminder);
        } return false;
    }, dataBot.firstReminder);
} 

export { checkStatus };