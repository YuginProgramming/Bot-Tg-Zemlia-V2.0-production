import bot from "./app.js";
import { sendNewRowsToTelegram } from './crawler.js';
import { searchForNew } from "./filedata.js";
import { dataBot } from './values.js';
import { writeGoogle, readGoogle } from './crud.js';
import { checkStatus } from './interval.js';

let customerPhone;
let customerName;
let customerInfo = {};
let selectedOrderRaw;


const spreadsheetId = dataBot.googleSheetId;
const phoneRegex = /^\d{10,12}$/;

const phrases = {
  greetings: '–ü—Ä–∏–≤—ñ—Ç, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è".',
  contactRequest: '–ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º?',
  dataConfirmation: `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${customerPhone}. –í–∞—à–µ —ñ–º—è ${customerName}. –î–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ?`,
  thanksForOrder: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –î—è–∫—É—é ${customerName}`,
  wrongName: '–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º\'—è:',
  wrongPhone: '–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–µ —Ä–∞–∑:',
  phoneRules: '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –±–µ–∑ +. –õ–∏—à–µ —Ü–∏—Ñ—Ä–∏. –Ü –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
  nameRequest: '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º\'—è:',
};

const keyboards = {
  startingKeyboard: [['–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è']],
  contactRequest: [
    [ { text: '–¢–∞–∫', request_contact: true, } ],
    ['–ù—ñ, —è –≤–≤–µ–¥—É –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É'],
    ['/start'],
  ],
  dataConfirmation: [
    ['–¢–∞–∫, –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
    ['–ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è'],
    ['/start'],
  ],
  enterPhone: [ ['/start'] ]
}

export const anketaListiner = async() => {
    bot.setMyCommands([
      {command: '/start', description: '–ü–æ—á–∞—Ç–∏'},
      {command: '/list', description: '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–æ—Ç–∏'},
    ]);
    bot.onText(/\/start/ , (msg) => {
        customerPhone = undefined;
        customerName = undefined;
        bot.sendMessage(msg.chat.id, phrases.greetings, {
            reply_markup: { keyboard: keyboards.startingKeyboard, resize_keyboard: true, one_time_keyboard: true }
        });
    });
    //'–ö—É–ø–∏—Ç–∏ –¥—ñ–ª—è–Ω–∫—É' button handler
    bot.on("callback_query", async (query) => {
      selectedOrderRaw = query.data;
      const chatId = query.message.chat.id;
      customerInfo[chatId] = { lotNumber : query.data, phone: undefined, name: undefined };
      const statusNew = await searchForNew(spreadsheetId, `${dataBot.googleSheetName}!${dataBot.statusColumn}${customerInfo[chatId].lotNumber}`)
      if (statusNew) {
        await writeGoogle(`${dataBot.googleSheetName}!${dataBot.statusColumn}${customerInfo[chatId].lotNumber}`, [['reserve']]);
        checkStatus(selectedOrderRaw, chatId);
        await writeGoogle(`${dataBot.googleSheetName}!${dataBot.user.idColumn}${customerInfo[chatId].lotNumber}`, [[`${chatId}`]]);
        bot.sendMessage(chatId, phrases.contactRequest, { reply_markup: { keyboard: keyboards.contactRequest, resize_keyboard: true }});
      } else bot.sendMessage(chatId, '—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    })
    bot.onText(/\/list/ , async (msg) => {
      await sendNewRowsToTelegram(spreadsheetId, dataBot.googleSheetName, dataBot.statusColumn, msg.chat.id, bot);     
    });
    bot.on('message', async (msg) => {
      console.log(customerInfo);
      const chatId = msg.chat.id;
      if (msg.text === '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') await sendNewRowsToTelegram(spreadsheetId, dataBot.googleSheetName, dataBot.statusColumn, chatId, bot);
      else if (msg.contact) {
        if (!customerInfo[chatId]) {
          customerInfo[chatId] = {};
        }
        customerInfo[chatId].name = msg.contact.first_name;
        customerInfo[chatId].phone = msg.contact.phone_number;
        customerPhone = msg.contact.phone_number;
        customerName = msg.contact.first_name;
        bot.sendMessage(chatId, `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${customerInfo[chatId].phone}. –í–∞—à–µ —ñ–º—è ${customerInfo[chatId].name}. –î–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ?`, { 
          reply_markup: { keyboard: keyboards.dataConfirmation, resize_keyboard: true, one_time_keyboard: true }});
      } else if(msg.text === '–¢–∞–∫, –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') {
          const chatId = msg.chat.id;
          if (!([chatId] in customerInfo)) bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—Ç–µ—Å—è –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
          else {
            await writeGoogle(`${dataBot.googleSheetName}!${dataBot.statusColumn}${customerInfo[chatId].lotNumber}`, [['done']]);
            await writeGoogle(`${dataBot.googleSheetName}!${dataBot.user.nameColumn}${customerInfo[chatId].lotNumber}`, [[customerInfo[chatId].name]]);
            await writeGoogle(`${dataBot.googleSheetName}!${dataBot.user.phoneColumn}${customerInfo[chatId].lotNumber}`, [[customerInfo[chatId].phone]]);
            const message_id = await (await readGoogle(`${dataBot.googleSheetName}!${dataBot.content.message_idColumn}${customerInfo[chatId].lotNumber}`))[0];
            const oldMessage = await readGoogle(`${dataBot.googleSheetName}!${dataBot.content.startColumn}${customerInfo[chatId].lotNumber}:${dataBot.content.endColumn}${selectedOrderRaw}`);
            const oldMessageString = oldMessage.join('\n');
            const newMessage = "üìå " + oldMessageString;
            try {
              await bot.editMessageText(newMessage, {chat_id: dataBot.channelId, message_id: message_id});
            } catch (error) {
              console.log(error)
            }
            bot.sendMessage(chatId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –î—è–∫—É—é ${customerInfo[chatId].name}`);
          } 
      } else if (msg.text === '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É') {
        bot.sendMessage(chatId, '/start');
      } else if(msg.text === `–ù—ñ, —è –≤–≤–µ–¥—É –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É` || msg.text === '–ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è') {
        customerPhone = undefined;
        customerName = undefined;  
        bot.sendMessage(chatId, phrases.phoneRules, {
          reply_markup: { keyboard: keyboards.enterPhone, resize_keyboard: true },
        });
      } else if (phoneRegex.test(msg.text)) {
        customerInfo[chatId].phone = msg.text;
        customerPhone = msg.text;
        bot.sendMessage(chatId, phrases.nameRequest);
      } else if (customerPhone && customerName == undefined ) {
        if (msg.text.length >= 2) {
        customerName = msg.text;
        customerInfo[chatId].name = msg.text;
        bot.sendMessage(chatId, `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${customerInfo[chatId].phone}. –í–∞—à–µ —ñ–º—è ${customerInfo[chatId].name}. –î–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ?` , {
          reply_markup: { keyboard: keyboards.dataConfirmation, resize_keyboard: true, one_time_keyboard: true },
        });
        };
      };
  });
};